@using App.DAL.DTO
@model WebApp.ViewModels.UserFormViewModel

@{
    ViewData["Title"] = "Dashboard";
}

@if (!string.IsNullOrWhiteSpace(Model.Message))
{
    <div class="alert alert-info">@Model.Message</div>
}

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<form asp-action="Index" method="post">
    <p>Please enter your name and pick the Sectors you are currently involved in.</p>

    <label asp-for="Name">Name:</label><br />
    <input asp-for="Name" class="form-control" required />
    <span asp-validation-for="Name" class="text-danger"></span>
    <br /><br />

    <label asp-for="SelectedSectorIds">Sectors:</label><br />
    <select name="SelectedSectorIds" multiple size="5" class="form-control checkboxes-valid">
        @foreach (var sector in Model.Sectors)
        {
            @Html.Raw(RenderSector(sector, Model.SelectedSectorIds))
        }
    </select>
    @Html.ValidationMessageFor(m => m.SelectedSectorIds)
    <br /><br />

    <input asp-for="AgreeToTerms" type="checkbox" />
    <label asp-for="AgreeToTerms">Agree to Terms</label>
    <span asp-validation-for="AgreeToTerms" class="text-danger"></span>
    <br /><br />

    <input type="submit" value="Save" class="btn btn-primary" />
</form>

@functions {
    private static string RenderSector(SectorTree sector, List<int> selected, int depth = 0)
    {
        var indent = new string('\u00A0', depth * 4);
        var selectedAttr = selected.Contains(sector.Id) ? " selected" : "";
        var option = $"<option value=\"{sector.Id}\"{selectedAttr}>{indent}{sector.Name}</option>\n";

        foreach (var child in sector.Children)
        {
            option += RenderSector(child, selected, depth + 1);
        }

        return option;
    }
}
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}